buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()

    }
}

apply plugin: 'java'
apply from: './gradle/scripts/clean.gradle'
apply from: './gradle/scripts/getbuildnumber.gradle'
apply plugin: 'maven-publish'

group = "com.${org}.${groupid}"
archivesBaseName = "${archivebase}"

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'javafx-gradle-plugin'

def currentJvm = org.gradle.internal.jvm.Jvm.current()

if (!project.hasProperty("bambooshortPlanName"))
    ext.bambooshortPlanName = ""

version = "${version_major}.${version_minor}.${version_revis}b" + project.getBuildNumber()

ext.sharedManifest = manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Created-By": currentJvm,
               "Implementation-Title": archivesBaseName,
               "Implementation-Version": version,
               "Git-Hash": gitHash,
               "Main-Class": mainClass)
    }

task deobfJar(type: Jar) {
     from sourceSets.main.output
     //if project name is BBM-Dev it makes the deobf jar deobf-dev if not its just deobf
     classifier = "deobf"
     //sets where the jars go to.
     destinationDir = file 'output'
     manifest = project.manifest {
        from sharedManifest
    }
     mustRunAfter "jar" 
}

//copies the build.properties to the output dir for maven publishing.
task copyBuildXml(type: Copy) {
     from 'gradle.properties'
     into 'output'
}

jar {
     dependsOn copyBuildXml
     //if project has the property BBM-Dev then it appends dev to indicate the dev branch
     /*if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "dev-universal"
     else classifier = "universal"*/
     //sets where the jars go to.
     destinationDir = file 'output'
     manifest = project.manifest {
        from sharedManifest
     
     }
}

jfx {
    // minimal requirement for jfxJar-task
    mainClass = mainClass
    
    // minimal requirement for jfxNative-task
    vendor = 'DarkGuardsman'
}

publishing {
    publications {
        mavenJava(MavenPublication)
        {
            artifact jar
            if (project.hasProperty("minecraft"))
            artifact deobfJar
            artifact("output/gradle.properties") {
                classifier "gradle"
                extension "properties"
            }
            if (project.hasProperty("archivebase") && project.getProperty("archivebase") == "VoltzEngine")
            artifact apiZip
            if (project.hasProperty("archivebase") && project.getProperty("archivebase") == "VoltzEngine")
            artifact templetesZip
            //from components.java
            //prints the current date to the pom file.
            pom.withXml {
                asNode().appendNode('description', 'Created on ' + getDate())
            }
        }
}

    repositories {
        maven {
        //checks for a the local property as a gradle argument and if exists outputs to a local dir.
            if (project.hasProperty("local") && project.getProperty("local") == "true")
                url "file:" + projectDir.path + "/build/maven"
            else
                url "file:///home/services/dmod/maven"
        }
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
tasks.build.dependsOn deobfJar